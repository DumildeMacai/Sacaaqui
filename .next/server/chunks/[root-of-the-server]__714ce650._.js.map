{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/init.ts"],"sourcesContent":["// src/firebase/init.ts\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAEC8Imf55z2TcJBLh4k01tN4ZEYA4a8S4\",\n  authDomain: \"atm-locator-nbjla.firebaseapp.com\",\n  projectId: \"atm-locator-nbjla\",\n  storageBucket: \"atm-locator-nbjla.firebasestorage.app\",\n  messagingSenderId: \"717294013912\",\n  appId: \"1:717294013912:web:b2016cf45688da0fc6b6ad\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\nexport { auth, db };"],"names":[],"mappings":"AAAA,uBAAuB;;;;;AACvB;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,sLAAA,CAAA,gBAAa,AAAD,EAAE;AAE1B,sBAAsB;AACtB,MAAM,OAAO,CAAA,GAAA,2OAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,mKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/atms/%5Bid%5D/route.ts"],"sourcesContent":["// src/app/api/atms/[id]/route.ts\nimport { db } from '@/firebase/init';\nimport { doc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { NextResponse } from 'next/server';\nimport type { Atm } from '@/types';\n\n// Helper to convert Firestore Timestamps to ISO strings safely\nconst convertTimestampToString = (timestamp: any): string => {\n  if (timestamp && typeof timestamp.toDate === 'function') {\n    return timestamp.toDate().toISOString();\n  }\n  if (typeof timestamp === 'string') {\n    return timestamp;\n  }\n  return new Date(0).toISOString();\n};\n\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const id = params.id;\n    if (!id) {\n      return NextResponse.json({ error: 'ATM ID is required' }, { status: 400 });\n    }\n    \n    const atmRef = doc(db, 'atms', id);\n    const atmDoc = await getDoc(atmRef);\n\n    if (!atmDoc.exists()) {\n      return NextResponse.json({ error: 'ATM not found' }, { status: 404 });\n    }\n\n    const data = atmDoc.data();\n    const reports = (data.reports || []).map((report: any) => ({\n      ...report,\n      timestamp: convertTimestampToString(report.timestamp),\n    }));\n\n    const atm: Atm = {\n        id: atmDoc.id,\n        name: data.name || '',\n        address: data.address || '',\n        location: data.location || { lat: 0, lng: 0 },\n        status: data.status || 'desconhecido',\n        details: data.details || '',\n        lastUpdate: convertTimestampToString(data.lastUpdate),\n        reports: reports,\n    };\n\n    return NextResponse.json(atm);\n  } catch (error) {\n    console.error(`Error fetching ATM ${params.id} with Firestore Client:`, error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const id = params.id;\n    if (!id) {\n      return NextResponse.json({ error: 'ATM ID is required' }, { status: 400 });\n    }\n\n    const body: Partial<Omit<Atm, 'id'>> = await request.json();\n\n    if (!body.name || !body.address || !body.location || typeof body.location.lat !== 'number' || typeof body.location.lng !== 'number') {\n        return NextResponse.json({ error: 'Missing or invalid required ATM fields: name, address, location (lat, lng).' }, { status: 400 });\n    }\n    \n    const atmRef = doc(db, 'atms', id);\n\n    const updateData = {\n        ...body,\n        lastUpdate: serverTimestamp(),\n    };\n\n    await updateDoc(atmRef, updateData);\n\n    return NextResponse.json({ message: 'ATM updated successfully' }, { status: 200 });\n\n  } catch (error) {\n    console.error(`Error updating ATM ${params.id} with Firestore Client:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n    return NextResponse.json({ error: 'Internal Server Error', details: errorMessage }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}