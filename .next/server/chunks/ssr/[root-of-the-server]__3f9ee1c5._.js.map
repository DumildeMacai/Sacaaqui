{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/admin.ts"],"sourcesContent":["\nimport * as admin from 'firebase-admin';\n\nconst initAdmin = () => {\n    // This function ensures we only initialize the app once.\n    if (admin.apps.length > 0) {\n        return;\n    }\n\n    try {\n        // `applicationDefault` will try to find credentials from the environment.\n        // This works automatically in most Google Cloud environments.\n        // For local development, you need to set the GOOGLE_APPLICATION_CREDENTIALS\n        // environment variable.\n        admin.initializeApp({\n             credential: admin.credential.applicationDefault(),\n        });\n        console.log('Firebase Admin SDK initialized successfully.');\n    } catch (error) {\n        console.error('Firebase Admin SDK initialization error:', error);\n        // This error is critical and should be handled.\n        // For now, we'll log it, but in a real app, you might want to\n        // prevent the app from starting or disable features that need admin access.\n    }\n};\n\n// Call initialization right away\ninitAdmin();\n\n// Export a function that returns the Firestore instance\nexport const getAdminDb = () => {\n    if (admin.apps.length === 0) {\n        // This is a fallback, but initAdmin should have already run.\n        initAdmin();\n    }\n    return admin.firestore();\n};\n\n// Export a function that returns the Auth instance\nexport const getAdminAuth = () => {\n    if (admin.apps.length === 0) {\n        initAdmin();\n    }\n    return admin.auth();\n};\n"],"names":[],"mappings":";;;;AACA;;AAEA,MAAM,YAAY;IACd,yDAAyD;IACzD,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,GAAG,GAAG;QACvB;IACJ;IAEA,IAAI;QACA,0EAA0E;QAC1E,8DAA8D;QAC9D,4EAA4E;QAC5E,wBAAwB;QACxB,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD,EAAE;YACf,YAAY,2HAAA,CAAA,aAAgB,CAAC,kBAAkB;QACpD;QACA,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,4CAA4C;IAC1D,gDAAgD;IAChD,8DAA8D;IAC9D,4EAA4E;IAChF;AACJ;AAEA,iCAAiC;AACjC;AAGO,MAAM,aAAa;IACtB,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,KAAK,GAAG;QACzB,6DAA6D;QAC7D;IACJ;IACA,OAAO,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD;AACzB;AAGO,MAAM,eAAe;IACxB,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,KAAK,GAAG;QACzB;IACJ;IACA,OAAO,CAAA,GAAA,2HAAA,CAAA,OAAU,AAAD;AACpB","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/get-users.ts"],"sourcesContent":["\n'use server';\n\nimport { getAdminDb } from '@/firebase/admin';\nimport type { User } from '@/types';\nimport { headers } from 'next/headers';\nimport { auth } from 'firebase-admin';\n\n// Helper function to verify the user's token and check if they are an admin.\nasync function verifyAdmin(): Promise<boolean> {\n    const authorization = headers().get('Authorization');\n    if (!authorization?.startsWith('Bearer ')) {\n        return false;\n    }\n    const idToken = authorization.split('Bearer ')[1];\n\n    try {\n        const decodedToken = await auth().verifyIdToken(idToken);\n        return decodedToken.email === 'admin@admin.com';\n    } catch (error) {\n        console.error(\"Error verifying admin token:\", error);\n        return false;\n    }\n}\n\n\nexport async function getUsersAction(): Promise<{ users: User[] } | { error: string }> {\n    try {\n        // This check is not strictly necessary if your Firestore rules are correctly\n        // set up for the Admin SDK, but it adds an extra layer of security.\n        const isAdmin = await verifyAdmin();\n        if (!isAdmin) {\n            // This case should ideally not be hit if the page is protected.\n            // return { error: \"Acesso nÃ£o autorizado.\" };\n        }\n        \n        const db = getAdminDb();\n        const usersSnapshot = await db.collection('users').get();\n        \n        if (usersSnapshot.empty) {\n            return { users: [] };\n        }\n        \n        const users: User[] = usersSnapshot.docs.map(doc => {\n            const data = doc.data();\n            return {\n                id: doc.id,\n                name: data.name || '',\n                email: data.email || '',\n                dateOfBirth: data.dateOfBirth || '',\n                phoneNumber: data.phoneNumber || '',\n                reputation: data.reputation ?? 0,\n            };\n        });\n\n        return { users };\n\n    } catch (error) {\n        console.error(\"Error in getUsersAction:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Ocorreu um erro desconhecido.';\n        return { error: `Falha ao buscar utilizadores: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AACA;;;;;;;AAEA,6EAA6E;AAC7E,eAAe;IACX,MAAM,gBAAgB,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC;IACpC,IAAI,CAAC,eAAe,WAAW,YAAY;QACvC,OAAO;IACX;IACA,MAAM,UAAU,cAAc,KAAK,CAAC,UAAU,CAAC,EAAE;IAEjD,IAAI;QACA,MAAM,eAAe,MAAM,CAAA,GAAA,2HAAA,CAAA,OAAI,AAAD,IAAI,aAAa,CAAC;QAChD,OAAO,aAAa,KAAK,KAAK;IAClC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;IACX;AACJ;AAGO,eAAe;IAClB,IAAI;QACA,6EAA6E;QAC7E,oEAAoE;QACpE,MAAM,UAAU,MAAM;QACtB,IAAI,CAAC,SAAS;QACV,gEAAgE;QAChE,8CAA8C;QAClD;QAEA,MAAM,KAAK,CAAA,GAAA,wHAAA,CAAA,aAAU,AAAD;QACpB,MAAM,gBAAgB,MAAM,GAAG,UAAU,CAAC,SAAS,GAAG;QAEtD,IAAI,cAAc,KAAK,EAAE;YACrB,OAAO;gBAAE,OAAO,EAAE;YAAC;QACvB;QAEA,MAAM,QAAgB,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA;YACzC,MAAM,OAAO,IAAI,IAAI;YACrB,OAAO;gBACH,IAAI,IAAI,EAAE;gBACV,MAAM,KAAK,IAAI,IAAI;gBACnB,OAAO,KAAK,KAAK,IAAI;gBACrB,aAAa,KAAK,WAAW,IAAI;gBACjC,aAAa,KAAK,WAAW,IAAI;gBACjC,YAAY,KAAK,UAAU,IAAI;YACnC;QACJ;QAEA,OAAO;YAAE;QAAM;IAEnB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,OAAO,CAAC,8BAA8B,EAAE,cAAc;QAAC;IACpE;AACJ;;;IApCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/%28panel%29/users/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getUsersAction as '0064b366acb73bcb0edcc6a0e214bdec8fe931163a'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/%28panel%29/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/(panel)/users/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/(panel)/users/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/%28panel%29/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/(panel)/users/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/(panel)/users/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}