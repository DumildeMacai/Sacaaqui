{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/verify-atm-status.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file implements an AI flow to verify the ATM status based on user reports and reputation.\n *\n * - verifyAtmStatus - A function that verifies the ATM status.\n * - VerifyAtmStatusInput - The input type for the verifyAtmStatus function.\n * - VerifyAtmStatusOutput - The output type for the verifyAtmStatus function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyAtmStatusInputSchema = z.object({\n  atmId: z.string().describe('The ID of the ATM to verify.'),\n  reports: z.array(\n    z.object({\n      userId: z.string().describe('The ID of the user reporting the status.'),\n      status: z.enum(['com_dinheiro', 'sem_dinheiro']).describe('The reported status of the ATM.'),\n      timestamp: z.string().describe('The timestamp of the report in ISO format.'),\n    })\n  ).describe('An array of user reports for the ATM status.'),\n});\nexport type VerifyAtmStatusInput = z.infer<typeof VerifyAtmStatusInputSchema>;\n\nconst VerifyAtmStatusOutputSchema = z.object({\n  verifiedStatus: z.enum(['com_dinheiro', 'sem_dinheiro', 'desconhecido']).describe('The AI-verified status of the ATM.'),\n  confidenceScore: z.number().min(0).max(1).describe('A confidence score (0 to 1) for the verified status.'),\n  reasoning: z.string().describe('The reasoning behind the AI verification.'),\n});\nexport type VerifyAtmStatusOutput = z.infer<typeof VerifyAtmStatusOutputSchema>;\n\nexport async function verifyAtmStatus(input: VerifyAtmStatusInput): Promise<VerifyAtmStatusOutput> {\n  return verifyAtmStatusFlow(input);\n}\n\nconst verifyAtmStatusPrompt = ai.definePrompt({\n  name: 'verifyAtmStatusPrompt',\n  input: {schema: VerifyAtmStatusInputSchema},\n  output: {schema: VerifyAtmStatusOutputSchema},\n  prompt: `You are an AI assistant tasked with verifying the status of ATMs based on user reports.\n\n  Given the following ATM ID: {{{atmId}}}\n  And the following user reports:\n  {{#each reports}}\n  - User ID: {{{userId}}}, Status: {{{status}}}, Timestamp: {{{timestamp}}}\n  {{/each}}\n\n  Analyze the reports, taking into account potential biases, user reputation (which is not provided but should be assumed), and the recency of the reports.\n\n  Determine the most likely status of the ATM (com_dinheiro, sem_dinheiro, or desconhecido) and provide a confidence score (0 to 1) for your assessment.\n\n  Also, provide a brief reasoning for your decision.\n\n  Output in JSON format:\n  { \"verifiedStatus\": \"<status>\", \"confidenceScore\": <score>, \"reasoning\": \"<reason>\" }`,\n});\n\nconst verifyAtmStatusFlow = ai.defineFlow(\n  {\n    name: 'verifyAtmStatusFlow',\n    inputSchema: VerifyAtmStatusInputSchema,\n    outputSchema: VerifyAtmStatusOutputSchema,\n  },\n  async input => {\n    const {output} = await verifyAtmStatusPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CACd,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAgB;SAAe,EAAE,QAAQ,CAAC;QAC1D,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,IACA,QAAQ,CAAC;AACb;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAgB;QAAgB;KAAe,EAAE,QAAQ,CAAC;IAClF,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;IACnD,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;uFAe4E,CAAC;AACxF;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/verify-status.ts"],"sourcesContent":["\"use server\";\n\nimport { verifyAtmStatus, type VerifyAtmStatusInput, type VerifyAtmStatusOutput } from \"@/ai/flows/verify-atm-status\";\n\nexport async function verifyAtmStatusAction(input: VerifyAtmStatusInput): Promise<VerifyAtmStatusOutput> {\n    try {\n        const result = await verifyAtmStatus(input);\n        return result;\n    } catch (error) {\n        console.error(\"Error verifying ATM status with AI:\", error);\n        throw new Error(\"AI verification failed.\");\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,sBAAsB,KAA2B;IACnE,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,6IAAA,CAAA,kBAAe,AAAD,EAAE;QACrC,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uCAAuC;QACrD,MAAM,IAAI,MAAM;IACpB;AACJ;;;IARsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/atm/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {verifyAtmStatusAction as '401fbe705ad27fd5f69581e88ae6e4e533182f705f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-verification-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AtmVerificationClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call AtmVerificationClient() from the server but AtmVerificationClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/atm-verification-client.tsx <module evaluation>\",\n    \"AtmVerificationClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,wBAAwB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvD;IAAa,MAAM,IAAI,MAAM;AAA0P,GACvR,4EACA","debugId":null}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-verification-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AtmVerificationClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call AtmVerificationClient() from the server but AtmVerificationClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/atm-verification-client.tsx\",\n    \"AtmVerificationClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,wBAAwB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvD;IAAa,MAAM,IAAI,MAAM;AAA0P,GACvR,wDACA","debugId":null}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-detail.tsx"],"sourcesContent":["import type { Atm } from '@/types';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle2, CircleSlash, HelpCircle, MapPin, Clock } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { AtmVerificationClient } from './atm-verification-client';\n\ntype StatusVariant = 'default' | 'destructive' | 'secondary';\n\nconst statusMap: { [key in Atm['status']]: { text: string; variant: StatusVariant; icon: React.ReactNode } } = {\n  com_dinheiro: { text: 'Com Dinheiro', variant: 'default', icon: <CheckCircle2 className=\"h-4 w-4 text-accent\" /> },\n  sem_dinheiro: { text: 'Sem Dinheiro', variant: 'destructive', icon: <CircleSlash className=\"h-4 w-4\" /> },\n  desconhecido: { text: 'Desconhecido', variant: 'secondary', icon: <HelpCircle className=\"h-4 w-4\" /> },\n};\n\nexport function AtmDetail({ atm }: { atm: Atm }) {\n  const statusInfo = statusMap[atm.status];\n\n  return (\n    <div className=\"grid gap-8 md:grid-cols-3\">\n        <div className=\"md:col-span-2 space-y-8\">\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between font-headline text-3xl\">\n                        {atm.name}\n                        <Badge variant={statusInfo.variant} className=\"flex items-center gap-1 text-base\">\n                            {statusInfo.icon}\n                            {statusInfo.text}\n                        </Badge>\n                    </CardTitle>\n                    <CardDescription className=\"flex items-center gap-2 pt-2\">\n                        <MapPin className=\"h-4 w-4\" />\n                        {atm.address}\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-sm text-muted-foreground\">\n                        <p>Última atualização: {format(new Date(atm.lastUpdate), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}</p>\n                    </div>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle>Histórico de Atualizações</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <ul className=\"space-y-4\">\n                        {atm.reports.map((report, index) => (\n                            <li key={index} className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-3\">\n                                    {report.status === 'com_dinheiro' ? <CheckCircle2 className=\"h-5 w-5 text-accent\" /> : <CircleSlash className=\"h-5 w-5 text-destructive\" />}\n                                    <div>\n                                        <p className=\"font-medium\">Status: {report.status === 'com_dinheiro' ? 'Com Dinheiro' : 'Sem Dinheiro'}</p>\n                                        <p className=\"text-sm text-muted-foreground\">por {report.userName}</p>\n                                    </div>\n                                </div>\n                                <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                                   <Clock className=\"h-4 w-4\" />\n                                   {format(new Date(report.timestamp), \"dd/MM 'às' HH:mm\", { locale: ptBR })}\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </CardContent>\n            </Card>\n        </div>\n\n        <div className=\"md:col-span-1\">\n             <AtmVerificationClient atm={atm} />\n        </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;AAIA,MAAM,YAAyG;IAC7G,cAAc;QAAE,MAAM;QAAgB,SAAS;QAAW,oBAAM,8OAAC,qNAAA,CAAA,eAAY;YAAC,WAAU;;;;;;IAAyB;IACjH,cAAc;QAAE,MAAM;QAAgB,SAAS;QAAe,oBAAM,8OAAC,oNAAA,CAAA,cAAW;YAAC,WAAU;;;;;;IAAa;IACxG,cAAc;QAAE,MAAM;QAAgB,SAAS;QAAa,oBAAM,8OAAC,kNAAA,CAAA,aAAU;YAAC,WAAU;;;;;;IAAa;AACvG;AAEO,SAAS,UAAU,EAAE,GAAG,EAAgB;IAC7C,MAAM,aAAa,SAAS,CAAC,IAAI,MAAM,CAAC;IAExC,qBACE,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAI,WAAU;;kCACX,8OAAC,gIAAA,CAAA,OAAI;;0CACD,8OAAC,gIAAA,CAAA,aAAU;;kDACP,8OAAC,gIAAA,CAAA,YAAS;wCAAC,WAAU;;4CAChB,IAAI,IAAI;0DACT,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAS,WAAW,OAAO;gDAAE,WAAU;;oDACzC,WAAW,IAAI;oDACf,WAAW,IAAI;;;;;;;;;;;;;kDAGxB,8OAAC,gIAAA,CAAA,kBAAe;wCAAC,WAAU;;0DACvB,8OAAC,0MAAA,CAAA,SAAM;gDAAC,WAAU;;;;;;4CACjB,IAAI,OAAO;;;;;;;;;;;;;0CAGpB,8OAAC,gIAAA,CAAA,cAAW;0CACR,cAAA,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC;;4CAAE;4CAAqB,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,IAAI,UAAU,GAAG,yBAAyB;gDAAE,QAAQ,kJAAA,CAAA,OAAI;4CAAC;;;;;;;;;;;;;;;;;;;;;;;kCAK7G,8OAAC,gIAAA,CAAA,OAAI;;0CACD,8OAAC,gIAAA,CAAA,aAAU;0CACP,cAAA,8OAAC,gIAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;0CAEf,8OAAC,gIAAA,CAAA,cAAW;0CACR,cAAA,8OAAC;oCAAG,WAAU;8CACT,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,sBACtB,8OAAC;4CAAe,WAAU;;8DACtB,8OAAC;oDAAI,WAAU;;wDACV,OAAO,MAAM,KAAK,+BAAiB,8OAAC,qNAAA,CAAA,eAAY;4DAAC,WAAU;;;;;iFAA2B,8OAAC,oNAAA,CAAA,cAAW;4DAAC,WAAU;;;;;;sEAC9G,8OAAC;;8EACG,8OAAC;oEAAE,WAAU;;wEAAc;wEAAS,OAAO,MAAM,KAAK,iBAAiB,iBAAiB;;;;;;;8EACxF,8OAAC;oEAAE,WAAU;;wEAAgC;wEAAK,OAAO,QAAQ;;;;;;;;;;;;;;;;;;;8DAGzE,8OAAC;oDAAI,WAAU;;sEACZ,8OAAC,oMAAA,CAAA,QAAK;4DAAC,WAAU;;;;;;wDAChB,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,OAAO,SAAS,GAAG,oBAAoB;4DAAE,QAAQ,kJAAA,CAAA,OAAI;wDAAC;;;;;;;;2CAVrE;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAmB7B,8OAAC;gBAAI,WAAU;0BACV,cAAA,8OAAC,mJAAA,CAAA,wBAAqB;oBAAC,KAAK;;;;;;;;;;;;;;;;;AAIzC","debugId":null}},
    {"offset": {"line": 878, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/adminInit.ts"],"sourcesContent":["\nimport * as admin from 'firebase-admin';\nimport { config } from 'dotenv';\nimport { expand } from 'dotenv-expand';\n\nlet db: admin.firestore.Firestore;\n\nfunction initializeAdmin() {\n    if (admin.apps.length > 0) {\n        console.log(\"Firebase Admin SDK já inicializado.\");\n        db = admin.firestore();\n        return;\n    }\n\n    const myEnv = config();\n    expand(myEnv);\n\n    console.log(\"Tentando inicializar o Firebase Admin SDK...\");\n\n    try {\n        const serviceAccount = {\n            projectId: process.env.FIREBASE_PROJECT_ID,\n            privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n            clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n        };\n\n        if (!serviceAccount.projectId || !serviceAccount.privateKey || !serviceAccount.clientEmail) {\n            throw new Error(\"As credenciais de serviço do Firebase Admin não estão completas. Verifique as variáveis de ambiente.\");\n        }\n\n        admin.initializeApp({\n            credential: admin.credential.cert(serviceAccount),\n            databaseURL: `https://${process.env.FIREBASE_PROJECT_ID}.firebaseio.com`\n        });\n        \n        console.log(\"Firebase Admin SDK inicializado com sucesso!\");\n        db = admin.firestore();\n\n    } catch (error) {\n        console.error(\"Erro ao inicializar o Firebase Admin SDK:\", error);\n        // Em um ambiente de produção real, você pode querer lidar com este erro de forma mais robusta.\n    }\n}\n\ninitializeAdmin();\n\nexport function getAdminDb() {\n  if (!db) {\n    throw new Error(\"O Firestore Admin não está disponível. A inicialização do Admin SDK pode ter falhado.\");\n  }\n  return db;\n}\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAEA,IAAI;AAEJ,SAAS;IACL,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,GAAG,GAAG;QACvB,QAAQ,GAAG,CAAC;QACZ,KAAK,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD;QACnB;IACJ;IAEA,MAAM,QAAQ,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD;IACnB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE;IAEP,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACA,MAAM,iBAAiB;YACnB,WAAW,QAAQ,GAAG,CAAC,mBAAmB;YAC1C,YAAY,QAAQ,GAAG,CAAC,0BAA0B,EAAE,QAAQ,QAAQ;YACpE,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAClD;QAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,UAAU,IAAI,CAAC,eAAe,WAAW,EAAE;YACxF,MAAM,IAAI,MAAM;QACpB;QAEA,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD,EAAE;YAChB,YAAY,2HAAA,CAAA,aAAgB,CAAC,IAAI,CAAC;YAClC,aAAa,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,mBAAmB,CAAC,eAAe,CAAC;QAC5E;QAEA,QAAQ,GAAG,CAAC;QACZ,KAAK,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD;IAEvB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6CAA6C;IAC3D,+FAA+F;IACnG;AACJ;AAEA;AAEO,SAAS;IACd,IAAI,CAAC,IAAI;QACP,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 930, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/atm/%5Bid%5D/page.tsx"],"sourcesContent":["import { AtmDetail } from '@/components/atm-detail';\nimport { getAdminDb } from '@/firebase/adminInit'; \nimport { notFound } from 'next/navigation';\nimport type { Atm } from '@/types';\nimport { doc, getDoc } from 'firebase/firestore';\n\nexport default async function AtmDetailPage({ params }: { params: { id: string } }) {\n  const { id: atmId } = params; \n\n  console.log(\"Tentando buscar ATM com ID (usando Admin SDK):\", atmId); \n  const adminDb = getAdminDb(); \n\n  try {\n    const atmRef = doc(adminDb, 'atms', atmId); \n    const docSnap = await getDoc(atmRef);\n\n    if (!docSnap.exists()) {\n      notFound(); \n    }\n\n    const atmData = docSnap.data() as Atm; \n\n    if (atmData.lastUpdate && typeof atmData.lastUpdate !== 'string' && typeof (atmData.lastUpdate as any).toDate === 'function') {\n        atmData.lastUpdate = (atmData.lastUpdate as any).toDate().toISOString();\n    }\n    \n    return <AtmDetail atm={{ ...atmData, id: docSnap.id }} />;\n\n  } catch (error) {\n    console.error('Erro ao buscar ATM no Firestore (Admin SDK):', error);\n    notFound();\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AAEA;AAAA;;;;;;AAEe,eAAe,cAAc,EAAE,MAAM,EAA8B;IAChF,MAAM,EAAE,IAAI,KAAK,EAAE,GAAG;IAEtB,QAAQ,GAAG,CAAC,kDAAkD;IAC9D,MAAM,UAAU,CAAA,GAAA,4HAAA,CAAA,aAAU,AAAD;IAEzB,IAAI;QACF,MAAM,SAAS,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,SAAS,QAAQ;QACpC,MAAM,UAAU,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;QAE7B,IAAI,CAAC,QAAQ,MAAM,IAAI;YACrB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;QACT;QAEA,MAAM,UAAU,QAAQ,IAAI;QAE5B,IAAI,QAAQ,UAAU,IAAI,OAAO,QAAQ,UAAU,KAAK,YAAY,OAAO,AAAC,QAAQ,UAAU,CAAS,MAAM,KAAK,YAAY;YAC1H,QAAQ,UAAU,GAAG,AAAC,QAAQ,UAAU,CAAS,MAAM,GAAG,WAAW;QACzE;QAEA,qBAAO,8OAAC,mIAAA,CAAA,YAAS;YAAC,KAAK;gBAAE,GAAG,OAAO;gBAAE,IAAI,QAAQ,EAAE;YAAC;;;;;;IAEtD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gDAAgD;QAC9D,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;AACF","debugId":null}}]
}