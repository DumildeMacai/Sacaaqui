{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/adminInit.ts"],"sourcesContent":["'use server';\n\nimport * as admin from 'firebase-admin';\nimport { config } from 'dotenv';\n\n// Carrega as variáveis de ambiente do ficheiro .env\nconfig();\n\nconst serviceAccount = {\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n  clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n};\n\nfunction initializeAdmin() {\n    // Validação robusta das credenciais\n    if (!serviceAccount.projectId || !serviceAccount.privateKey || !serviceAccount.clientEmail) {\n        console.error(\"As credenciais de serviço do Firebase Admin estão em falta ou incompletas. Verifique as suas variáveis de ambiente.\");\n        return null;\n    }\n\n    if (admin.apps.length > 0) {\n        return admin.app();\n    }\n\n    try {\n        return admin.initializeApp({\n            credential: admin.credential.cert(serviceAccount),\n            databaseURL: `https://${process.env.FIREBASE_PROJECT_ID}.firebaseio.com`,\n        });\n    } catch (error: any) {\n        console.error(\"Erro CRÍTICO ao inicializar o Firebase Admin SDK:\", error.message);\n        return null;\n    }\n}\n\nconst app = initializeAdmin();\nconst db = app ? admin.firestore() : null;\n\nexport async function getAdminDb() {\n  if (!db) {\n    throw new Error(\"O Firestore Admin não está disponível. A inicialização do Admin SDK pode ter falhado.\");\n  }\n  return db;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,oDAAoD;AACpD,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD;AAEL,MAAM,iBAAiB;IACrB,WAAW,QAAQ,GAAG,CAAC,mBAAmB;IAC1C,YAAY,QAAQ,GAAG,CAAC,0BAA0B,EAAE,QAAQ,QAAQ;IACpE,aAAa,QAAQ,GAAG,CAAC,qBAAqB;AAChD;AAEA,SAAS;IACL,oCAAoC;IACpC,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,UAAU,IAAI,CAAC,eAAe,WAAW,EAAE;QACxF,QAAQ,KAAK,CAAC;QACd,OAAO;IACX;IAEA,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,GAAG,GAAG;QACvB,OAAO,CAAA,GAAA,2HAAA,CAAA,MAAS,AAAD;IACnB;IAEA,IAAI;QACA,OAAO,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD,EAAE;YACvB,YAAY,2HAAA,CAAA,aAAgB,CAAC,IAAI,CAAC;YAClC,aAAa,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,mBAAmB,CAAC,eAAe,CAAC;QAC5E;IACJ,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,qDAAqD,MAAM,OAAO;QAChF,OAAO;IACX;AACJ;AAEA,MAAM,MAAM;AACZ,MAAM,KAAK,MAAM,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD,MAAM;AAE9B,eAAe;IACpB,IAAI,CAAC,IAAI;QACP,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IALsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["'use server'\n\nimport { getAdminDb } from '@/firebase/adminInit';\nimport type { Atm } from '@/types';\n\nexport async function getAtms(): Promise<Atm[]> {\n  const adminDb = await getAdminDb();\n\n  try {\n    const atmsSnapshot = await adminDb.collection('atms').get();\n    if (atmsSnapshot.empty) {\n      console.log(\"Nenhum ATM encontrado no Firestore.\");\n      return [];\n    }\n\n    const atms = atmsSnapshot.docs.map(doc => {\n      const data = doc.data();\n      return {\n        id: doc.id,\n        ...data,\n        // Garante que os Timestamps sejam convertidos para strings ISO\n        lastUpdate: data.lastUpdate?.toDate?.().toISOString() || new Date().toISOString(),\n        reports: data.reports?.map((report: any) => ({\n          ...report,\n          timestamp: report.timestamp?.toDate?.().toISOString() || report.timestamp || new Date().toISOString(),\n        })) || [],\n      } as Atm;\n    });\n    return atms;\n  } catch (error) {\n    console.error(\"Erro ao buscar ATMs no Firestore:\", error);\n    return [];\n  }\n}\n\nexport async function getAtmById(id: string): Promise<Atm | null> {\n    const adminDb = await getAdminDb();\n  \n    try {\n      const atmDoc = await adminDb.collection('atms').doc(id).get();\n  \n      if (!atmDoc.exists) {\n        console.log(`ATM com id ${id} não encontrado.`);\n        return null;\n      }\n  \n      const data = atmDoc.data()!;\n      \n      return {\n        id: atmDoc.id,\n        ...data,\n         // Garante que os Timestamps sejam convertidos para strings ISO\n         lastUpdate: data.lastUpdate?.toDate?.().toISOString() || new Date().toISOString(),\n         reports: data.reports?.map((report: any) => ({\n           ...report,\n           timestamp: report.timestamp?.toDate?.().toISOString() || report.timestamp || new Date().toISOString(),\n         })) || [],\n      } as Atm;\n  \n    } catch (error) {\n      console.error(`Erro ao buscar ATM com id ${id}:`, error);\n      return null;\n    }\n  }\n"],"names":[],"mappings":";;;;;;AAEA;;;;;AAGO,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,4HAAA,CAAA,aAAU,AAAD;IAE/B,IAAI;QACF,MAAM,eAAe,MAAM,QAAQ,UAAU,CAAC,QAAQ,GAAG;QACzD,IAAI,aAAa,KAAK,EAAE;YACtB,QAAQ,GAAG,CAAC;YACZ,OAAO,EAAE;QACX;QAEA,MAAM,OAAO,aAAa,IAAI,CAAC,GAAG,CAAC,CAAA;YACjC,MAAM,OAAO,IAAI,IAAI;YACrB,OAAO;gBACL,IAAI,IAAI,EAAE;gBACV,GAAG,IAAI;gBACP,+DAA+D;gBAC/D,YAAY,KAAK,UAAU,EAAE,WAAW,iBAAiB,IAAI,OAAO,WAAW;gBAC/E,SAAS,KAAK,OAAO,EAAE,IAAI,CAAC,SAAgB,CAAC;wBAC3C,GAAG,MAAM;wBACT,WAAW,OAAO,SAAS,EAAE,WAAW,iBAAiB,OAAO,SAAS,IAAI,IAAI,OAAO,WAAW;oBACrG,CAAC,MAAM,EAAE;YACX;QACF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,EAAE;IACX;AACF;AAEO,eAAe,WAAW,EAAU;IACvC,MAAM,UAAU,MAAM,CAAA,GAAA,4HAAA,CAAA,aAAU,AAAD;IAE/B,IAAI;QACF,MAAM,SAAS,MAAM,QAAQ,UAAU,CAAC,QAAQ,GAAG,CAAC,IAAI,GAAG;QAE3D,IAAI,CAAC,OAAO,MAAM,EAAE;YAClB,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,gBAAgB,CAAC;YAC9C,OAAO;QACT;QAEA,MAAM,OAAO,OAAO,IAAI;QAExB,OAAO;YACL,IAAI,OAAO,EAAE;YACb,GAAG,IAAI;YACN,+DAA+D;YAC/D,YAAY,KAAK,UAAU,EAAE,WAAW,iBAAiB,IAAI,OAAO,WAAW;YAC/E,SAAS,KAAK,OAAO,EAAE,IAAI,CAAC,SAAgB,CAAC;oBAC3C,GAAG,MAAM;oBACT,WAAW,OAAO,SAAS,EAAE,WAAW,iBAAiB,OAAO,SAAS,IAAI,IAAI,OAAO,WAAW;gBACrG,CAAC,MAAM,EAAE;QACZ;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC,EAAE;QAClD,OAAO;IACT;AACF;;;IA1DoB;IA8BA;;AA9BA,+OAAA;AA8BA,+OAAA","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getAtms as '002c531ac2a548d2243e12d2377a999227baa47290'} from 'ACTIONS_MODULE0'\nexport {getAtmById as '404d695c714c8bdc108eb0254a6f4bdb6d18a8f109'} from 'ACTIONS_MODULE0'\nexport {getAdminDb as '00f726833eb87708caf956d71bb65a18a54ea1101d'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAEA","debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AtmList = registerClientReference(\n    function() { throw new Error(\"Attempted to call AtmList() from the server but AtmList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/atm-list.tsx <module evaluation>\",\n    \"AtmList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,6DACA","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AtmList = registerClientReference(\n    function() { throw new Error(\"Attempted to call AtmList() from the server but AtmList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/atm-list.tsx\",\n    \"AtmList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,yCACA","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/logout-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogoutButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogoutButton() from the server but LogoutButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/logout-button.tsx <module evaluation>\",\n    \"LogoutButton\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,kEACA","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/logout-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogoutButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogoutButton() from the server but LogoutButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/logout-button.tsx\",\n    \"LogoutButton\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,8CACA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx"],"sourcesContent":["import type { Atm } from '@/types'; \nimport { AtmList } from '@/components/atm-list';\nimport { LogoutButton } from '@/components/logout-button';\nimport { Suspense } from 'react';\nimport { getAtms } from '@/lib/data'; // Importa a função para buscar dados reais\n\nexport default async function DashboardPage() { \n  // Usa a função para buscar dados do Firestore\n  const atms = await getAtms();\n\n return (\n    <div className=\"min-h-screen p-8\"> \n      <div className=\"flex justify-between items-center mb-8\"> \n        <div className=\"mb-8\"> \n          <h1 className=\"text-3xl font-bold tracking-tight font-headline\">ATMs Próximos</h1>\n          <p className=\"text-muted-foreground\">Veja o status dos caixas e ajude a comunidade.</p> \n        </div>\n        <LogoutButton /> \n      </div>\n      <Suspense fallback={<div>Carregando...</div>}>\n        <AtmList initialAtms={atms} />\n      </Suspense>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,sMAAsC,2CAA2C;;;;;;AAElE,eAAe;IAC5B,8CAA8C;IAC9C,MAAM,OAAO,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAO,AAAD;IAE1B,qBACG,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAkD;;;;;;0CAChE,8OAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;;kCAEvC,8OAAC,sIAAA,CAAA,eAAY;;;;;;;;;;;0BAEf,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC;8BAAI;;;;;;0BACvB,cAAA,8OAAC,iIAAA,CAAA,UAAO;oBAAC,aAAa;;;;;;;;;;;;;;;;;AAI9B","debugId":null}}]
}