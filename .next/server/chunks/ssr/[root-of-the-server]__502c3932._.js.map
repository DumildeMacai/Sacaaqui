{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/adminInit.ts"],"sourcesContent":["import * as admin from 'firebase-admin';\n\nconsole.log(\"Iniciando inicialização do Firebase Admin SDK...\"); // Log de início\n\n// Carregue o conteúdo da chave privada da variável de ambiente\nconst privateKey = process.env.FIREBASE_ADMIN_PRIVATE_KEY;\n\nconsole.log(\"FIREBASE_ADMIN_PRIVATE_KEY carregada?\", !!privateKey); // Verifica se a chave privada foi carregada\n\n// Verifique se a chave privada foi carregada\nif (!privateKey) {\n  console.error(\"FIREBASE_ADMIN_PRIVATE_KEY não está configurada nas variáveis de ambiente.\");\n  // Em um ambiente de produção, você pode querer adicionar um mecanismo de fallback ou sair do processo\n}\n\n// Carregue as credenciais da conta de serviço a partir da variável de ambiente\nconst serviceAccount = {\n  projectId: process.env.FIREBASE_PROJECT_ID, // Defina esta variável de ambiente\n  privateKey: privateKey ? privateKey.replace(/\\n/g, '\\n') : undefined, // Substitui \n  // por quebras de linha reais, verifica se privateKey existe\n  clientEmail: process.env.FIREBASE_CLIENT_EMAIL, // Defina esta variável de ambiente\n};\n\nconsole.log(\"Credenciais da conta de serviço carregadas:\", { // Log das credenciais carregadas (sem a chave privada completa) ...privateKey é intencional para não expor a chave completa no log\n  projectId: serviceAccount.projectId,\n  clientEmail: serviceAccount.clientEmail,\n  privateKey: serviceAccount.privateKey ? \"[Chave privada carregada]\" : \"[Chave privada ausente]\"\n});\n\nif (!admin.apps.length) {\n  try {\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount),\n      databaseURL: 'https://atm-locator-nbjla.firebaseio.com' // Substitua pelo URL do seu projeto se necessário\n    });\n    console.log(\"Firebase Admin SDK inicializado com sucesso!\"); // Log de sucesso na inicialização\n  } catch (error) {\n    console.error(\"Erro ao inicializar Firebase Admin SDK:\", error); // Log de erro na inicialização\n  }\n} else {\n  console.log(\"Firebase Admin SDK já inicializado, usando instância existente.\"); // Log se já estiver inicializado\n}\n\n/**\n * Retorna a instância do Firestore do Admin SDK.\n * Garante que o aplicativo Admin seja inicializado antes de acessar o Firestore.\n * @returns A instância do Firestore.\n */\nexport function getAdminDb() {\n  if (admin.apps.length === 0) {\n    throw new Error(\"Firebase Admin SDK não foi inicializado. Chame initializeApp antes de getAdminDb.\");\n  }\n  console.log(\"Obtendo instância do Admin Firestore...\"); // Log ao obter a instância\n  return admin.firestore();\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,QAAQ,GAAG,CAAC,qDAAqD,gBAAgB;AAEjF,+DAA+D;AAC/D,MAAM,aAAa,QAAQ,GAAG,CAAC,0BAA0B;AAEzD,QAAQ,GAAG,CAAC,yCAAyC,CAAC,CAAC,aAAa,4CAA4C;AAEhH,6CAA6C;AAC7C,IAAI,CAAC,YAAY;IACf,QAAQ,KAAK,CAAC;AACd,sGAAsG;AACxG;AAEA,+EAA+E;AAC/E,MAAM,iBAAiB;IACrB,WAAW,QAAQ,GAAG,CAAC,mBAAmB;IAC1C,YAAY,aAAa,WAAW,OAAO,CAAC,OAAO,QAAQ;IAC3D,4DAA4D;IAC5D,aAAa,QAAQ,GAAG,CAAC,qBAAqB;AAChD;AAEA,QAAQ,GAAG,CAAC,+CAA+C;IACzD,WAAW,eAAe,SAAS;IACnC,aAAa,eAAe,WAAW;IACvC,YAAY,eAAe,UAAU,GAAG,8BAA8B;AACxE;AAEA,IAAI,CAAC,2HAAA,CAAA,OAAU,CAAC,MAAM,EAAE;IACtB,IAAI;QACF,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD,EAAE;YAClB,YAAY,2HAAA,CAAA,aAAgB,CAAC,IAAI,CAAC;YAClC,aAAa,2CAA2C,kDAAkD;QAC5G;QACA,QAAQ,GAAG,CAAC,iDAAiD,kCAAkC;IACjG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C,QAAQ,+BAA+B;IAClG;AACF,OAAO;IACL,QAAQ,GAAG,CAAC,oEAAoE,iCAAiC;AACnH;AAOO,SAAS;IACd,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,KAAK,GAAG;QAC3B,MAAM,IAAI,MAAM;IAClB;IACA,QAAQ,GAAG,CAAC,4CAA4C,2BAA2B;IACnF,OAAO,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD;AACvB","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AtmList = registerClientReference(\n    function() { throw new Error(\"Attempted to call AtmList() from the server but AtmList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/atm-list.tsx <module evaluation>\",\n    \"AtmList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,6DACA","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/atm-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AtmList = registerClientReference(\n    function() { throw new Error(\"Attempted to call AtmList() from the server but AtmList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/atm-list.tsx\",\n    \"AtmList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,yCACA","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/logout-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogoutButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogoutButton() from the server but LogoutButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/logout-button.tsx <module evaluation>\",\n    \"LogoutButton\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,kEACA","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/logout-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LogoutButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LogoutButton() from the server but LogoutButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/logout-button.tsx\",\n    \"LogoutButton\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,8CACA","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx"],"sourcesContent":["import { getAdminDb } from '@/firebase/adminInit'; \nimport { collection, getDocs } from 'firebase/firestore'; // Importe as funções do Firestore\nimport type { Atm } from '@/types'; // Importe o tipo Atm\nimport { AtmList } from '@/components/atm-list';\nimport { LogoutButton } from '@/components/logout-button'; // Importe o novo componente\nimport { Suspense } from 'react'; // Importe Suspense\n\nexport default async function DashboardPage() { // Torne a função assíncrona\n  // --- Modificação: Buscar ATMs do Firestore no servidor e aguardar ---\n  const atms = await (async (): Promise<Atm[]> => {\n    try {\n      const adminDb = getAdminDb(); // Obtenha a instância do Admin Firestore\n      const querySnapshot = await getDocs(collection(adminDb, 'atms'));\n      const atmsList: Atm[] = querySnapshot.docs.map(doc => {\n        const data = doc.data() as Atm;\n        // Converte Timestamp para Date ao carregar os dados\n        if (data.lastUpdate && typeof data.lastUpdate !== 'string') {\n          data.lastUpdate = (data.lastUpdate as any).toDate();\n        }\n        return { ...data, id: doc.id }; // Garante que o ID do documento seja incluído\n      });\n      console.log('ATMs carregados do Firestore no servidor.');\n      return atmsList;\n    } catch (error) {\n      console.error('Erro ao carregar ATMs do Firestore no servidor:', error);\n      return []; // Retorna um array vazio em caso de erro\n    }\n  })(); // Chame a função imediatamente e aguarde\n\n\n return (\n    <div className=\"min-h-screen text-white p-8\"> {/* Adicionei um pouco de padding */}\n      <div className=\"flex justify-between items-center mb-8\"> {/* Usei flexbox para alinhar título e botão */}\n <div className=\"mb-8\"> {/* Adicionado div para o título e subtítulo */}\n <h1 className=\"text-3xl font-bold tracking-tight font-headline\">ATMs Próximos</h1>\n <p className=\"text-gray-400\">Veja o status dos caixas e ajude a comunidade.</p> {/* Ajustei a cor do texto */}\n </div>\n        <LogoutButton /> {/* Use o novo componente de botão de logout */}\n      </div>\n      <AtmList initialAtms={atms} />{/* Passe os dados buscados para AtmList */}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA,0TAA0D,kCAAkC;AAA5F;AAEA;AACA,2OAA2D,4BAA4B;;;;;;AAGxE,eAAe;IAC5B,uEAAuE;IACvE,MAAM,OAAO,MAAM,CAAC;QAClB,IAAI;YACF,MAAM,UAAU,CAAA,GAAA,4HAAA,CAAA,aAAU,AAAD,KAAK,yCAAyC;YACvE,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,SAAS;YACxD,MAAM,WAAkB,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA;gBAC7C,MAAM,OAAO,IAAI,IAAI;gBACrB,oDAAoD;gBACpD,IAAI,KAAK,UAAU,IAAI,OAAO,KAAK,UAAU,KAAK,UAAU;oBAC1D,KAAK,UAAU,GAAG,AAAC,KAAK,UAAU,CAAS,MAAM;gBACnD;gBACA,OAAO;oBAAE,GAAG,IAAI;oBAAE,IAAI,IAAI,EAAE;gBAAC,GAAG,8CAA8C;YAChF;YACA,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mDAAmD;YACjE,OAAO,EAAE,EAAE,yCAAyC;QACtD;IACF,CAAC,KAAK,yCAAyC;IAGhD,qBACG,8OAAC;QAAI,WAAU;;YAA8B;0BAC3C,8OAAC;gBAAI,WAAU;;oBAAyC;kCAC7D,8OAAC;wBAAI,WAAU;;4BAAO;0CACtB,8OAAC;gCAAG,WAAU;0CAAkD;;;;;;0CAChE,8OAAC;gCAAE,WAAU;0CAAgB;;;;;;4BAAkD;;;;;;;kCAExE,8OAAC,sIAAA,CAAA,eAAY;;;;;oBAAG;;;;;;;0BAElB,8OAAC,iIAAA,CAAA,UAAO;gBAAC,aAAa;;;;;;;;;;;;AAG5B","debugId":null}}]
}