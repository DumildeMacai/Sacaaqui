{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/admin.ts"],"sourcesContent":["// src/firebase/admin.ts\nimport admin from 'firebase-admin';\n\nconst initAdmin = () => {\n    if (admin.apps.length > 0) {\n        return admin.app();\n    }\n\n    try {\n        // Use application default credentials, which is the recommended way for most Google Cloud environments\n        return admin.initializeApp({\n            credential: admin.credential.applicationDefault(),\n        });\n    } catch (defaultError) {\n        console.error(\"Failed to initialize Admin SDK with application default credentials.\", defaultError);\n        throw new Error(\"Could not initialize Firebase Admin SDK. For local development, ensure you have run 'gcloud auth application-default login'.\");\n    }\n};\n\nexport const getAdminDb = () => {\n    initAdmin();\n    return admin.firestore();\n};\n\nexport const getAdminAuth = () => {\n    initAdmin();\n    return admin.auth();\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AACxB;;AAEA,MAAM,YAAY;IACd,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACvB,OAAO,2HAAA,CAAA,UAAK,CAAC,GAAG;IACpB;IAEA,IAAI;QACA,uGAAuG;QACvG,OAAO,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YACvB,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,kBAAkB;QACnD;IACJ,EAAE,OAAO,cAAc;QACnB,QAAQ,KAAK,CAAC,wEAAwE;QACtF,MAAM,IAAI,MAAM;IACpB;AACJ;AAEO,MAAM,aAAa;IACtB;IACA,OAAO,2HAAA,CAAA,UAAK,CAAC,SAAS;AAC1B;AAEO,MAAM,eAAe;IACxB;IACA,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/get-dashboard-data.ts"],"sourcesContent":["\n'use server';\n\nimport { getAdminDb } from \"@/firebase/admin\";\nimport type { Atm } from \"@/types\";\n\nexport interface DashboardData {\n    atmCount: number;\n    userCount: number;\n    chartData: {\n        name: string;\n        value: number;\n        fill: string;\n    }[];\n}\n\nexport async function getDashboardData(): Promise<DashboardData> {\n    try {\n        const adminDb = getAdminDb();\n        const atmsRef = adminDb.collection(\"atms\");\n        const usersRef = adminDb.collection(\"users\");\n\n        // Use get() and size for broader compatibility instead of count()\n        const [atmsSnapshot, usersSnapshot] = await Promise.all([\n            atmsRef.get(),\n            usersRef.get()\n        ]);\n\n        const atmCount = atmsSnapshot.size;\n        const userCount = usersSnapshot.size;\n\n        // Fetch all ATMs to calculate status distribution\n        const statusCounts: { [key in Atm['status']]: number } = {\n            com_dinheiro: 0,\n            sem_dinheiro: 0,\n            desconhecido: 0,\n        };\n\n        atmsSnapshot.forEach(doc => {\n            const atm = doc.data() as Omit<Atm, 'id'>;\n            if (statusCounts[atm.status] !== undefined) {\n                statusCounts[atm.status]++;\n            }\n        });\n\n        const chartData = [\n            { name: 'Com Dinheiro', value: statusCounts.com_dinheiro, fill: \"var(--color-com_dinheiro)\" },\n            { name: 'Sem Dinheiro', value: statusCounts.sem_dinheiro, fill: \"var(--color-sem_dinheiro)\"  },\n            { name: 'Desconhecido', value: statusCounts.desconhecido, fill: \"var(--color-desconhecido)\"  },\n        ];\n\n\n        return {\n            atmCount,\n            userCount,\n            chartData,\n        };\n\n    } catch (error) {\n        console.error(\"Error fetching dashboard data with Admin SDK:\", error);\n        // Provide a more specific error message if possible\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        throw new Error(`Failed to fetch dashboard data. Check server logs and Firestore permissions for the service account. Details: ${errorMessage}`);\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAaO,eAAe;IAClB,IAAI;QACA,MAAM,UAAU,CAAA,GAAA,wHAAA,CAAA,aAAU,AAAD;QACzB,MAAM,UAAU,QAAQ,UAAU,CAAC;QACnC,MAAM,WAAW,QAAQ,UAAU,CAAC;QAEpC,kEAAkE;QAClE,MAAM,CAAC,cAAc,cAAc,GAAG,MAAM,QAAQ,GAAG,CAAC;YACpD,QAAQ,GAAG;YACX,SAAS,GAAG;SACf;QAED,MAAM,WAAW,aAAa,IAAI;QAClC,MAAM,YAAY,cAAc,IAAI;QAEpC,kDAAkD;QAClD,MAAM,eAAmD;YACrD,cAAc;YACd,cAAc;YACd,cAAc;QAClB;QAEA,aAAa,OAAO,CAAC,CAAA;YACjB,MAAM,MAAM,IAAI,IAAI;YACpB,IAAI,YAAY,CAAC,IAAI,MAAM,CAAC,KAAK,WAAW;gBACxC,YAAY,CAAC,IAAI,MAAM,CAAC;YAC5B;QACJ;QAEA,MAAM,YAAY;YACd;gBAAE,MAAM;gBAAgB,OAAO,aAAa,YAAY;gBAAE,MAAM;YAA4B;YAC5F;gBAAE,MAAM;gBAAgB,OAAO,aAAa,YAAY;gBAAE,MAAM;YAA6B;YAC7F;gBAAE,MAAM;gBAAgB,OAAO,aAAa,YAAY;gBAAE,MAAM;YAA6B;SAChG;QAGD,OAAO;YACH;YACA;YACA;QACJ;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iDAAiD;QAC/D,oDAAoD;QACpD,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,MAAM,IAAI,MAAM,CAAC,8GAA8G,EAAE,cAAc;IACnJ;AACJ;;;IAhDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/%28panel%29/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getDashboardData as '00879f9357d3b42e2666da171427705e594fa57d78'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/%28panel%29/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/(panel)/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/(panel)/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4S,GACzU,0EACA","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/%28panel%29/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/(panel)/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/(panel)/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwR,GACrT,sDACA","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}