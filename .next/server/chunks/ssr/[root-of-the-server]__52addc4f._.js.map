{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["'use server';\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      apiKey: process.env.GEMINI_API_KEY,\n    }),\n  ],\n  logLevel: 'debug',\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;;;;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,cAAc;QACpC;KACD;IACD,UAAU;IACV,OAAO;AACT;;;IARa;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/verify-atm-status.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file implements an AI flow to verify the ATM status based on user reports and reputation.\n *\n * - verifyAtmStatus - A function that verifies the ATM status.\n * - VerifyAtmStatusInput - The input type for the verifyAtmStatus function.\n * - VerifyAtmStatusOutput - The output type for the verifyAtmStatus function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyAtmStatusInputSchema = z.object({\n  atmId: z.string().describe('The ID of the ATM to verify.'),\n  reports: z.array(\n    z.object({\n      userId: z.string().describe('The ID of the user reporting the status.'),\n      status: z.enum(['com_dinheiro', 'sem_dinheiro']).describe('The reported status of the ATM.'),\n      timestamp: z.string().describe('The timestamp of the report in ISO format.'),\n      userReputation: z.number().int().describe(\"The reputation score of the user who made the report.\"),\n    })\n  ).describe('An array of user reports for the ATM status, including user reputation.'),\n});\nexport type VerifyAtmStatusInput = z.infer<typeof VerifyAtmStatusInputSchema>;\n\nconst VerifyAtmStatusOutputSchema = z.object({\n  verifiedStatus: z.enum(['com_dinheiro', 'sem_dinheiro', 'desconhecido']).describe('The AI-verified status of the ATM.'),\n  confidenceScore: z.number().min(0).max(1).describe('A confidence score (0 to 1) for the verified status.'),\n  reasoning: z.string().describe('The reasoning behind the AI verification.'),\n});\nexport type VerifyAtmStatusOutput = z.infer<typeof VerifyAtmStatusOutputSchema>;\n\nexport async function verifyAtmStatus(input: VerifyAtmStatusInput): Promise<VerifyAtmStatusOutput> {\n  return verifyAtmStatusFlow(input);\n}\n\nconst verifyAtmStatusPrompt = ai.definePrompt({\n  name: 'verifyAtmStatusPrompt',\n  input: {schema: VerifyAtmStatusInputSchema},\n  output: {schema: VerifyAtmStatusOutputSchema},\n  prompt: `You are an AI assistant for an ATM locator app. Your task is to determine the most likely status of an ATM based on a series of user reports.\n\n  You must weigh the reports based on two main factors:\n  1.  **Recency**: Newer reports are more valuable than older ones. A report from 5 minutes ago is more significant than one from 2 days ago.\n  2.  **User Reputation**: Reports from users with a higher reputation score are more trustworthy. A user with a reputation of 10 is more reliable than a user with a reputation of 1.\n\n  Analyze the following reports for ATM ID {{{atmId}}}:\n  {{#each reports}}\n  - Report: Status=\"{{{status}}}\", Timestamp=\"{{{timestamp}}}\", UserReputation={{userReputation}}\n  {{/each}}\n\n  Based on a weighted analysis of recency and reputation, decide the most probable status: 'com_dinheiro', 'sem_dinheiro', or 'desconhecido' if there isn't enough information or the data is too conflicting.\n\n  Provide your final decision in JSON format with a confidence score (0.0 to 1.0) and a brief reasoning for your conclusion.\n  \n  Example reasoning: \"The most recent reports, including one from a high-reputation user, indicate the ATM has cash. Conflicting older reports were given less weight.\"\n  \n  `,\n});\n\nconst verifyAtmStatusFlow = ai.defineFlow(\n  {\n    name: 'verifyAtmStatusFlow',\n    inputSchema: VerifyAtmStatusInputSchema,\n    outputSchema: VerifyAtmStatusOutputSchema,\n  },\n  async input => {\n    const {output} = await verifyAtmStatusPrompt(input);\n    if (!output) {\n        throw new Error('The AI model failed to produce a valid output.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CACd,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAgB;SAAe,EAAE,QAAQ,CAAC;QAC1D,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;IAC5C,IACA,QAAQ,CAAC;AACb;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAgB;QAAgB;KAAe,EAAE,QAAQ,CAAC;IAClF,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;IACnD,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;;;EAiBT,CAAC;AACH;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACT;;;IAxCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/verify-status.ts"],"sourcesContent":["\"use server\";\n\nimport { verifyAtmStatus, type VerifyAtmStatusInput, type VerifyAtmStatusOutput } from \"@/ai/flows/verify-atm-status\";\n\nexport async function verifyAtmStatusAction(input: VerifyAtmStatusInput): Promise<VerifyAtmStatusOutput> {\n    try {\n        const result = await verifyAtmStatus(input);\n        return result;\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error(\"Error verifying ATM status with AI:\", errorMessage);\n        console.error(\"Full error object:\", error);\n        throw new Error(`AI verification failed: ${errorMessage}`);\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,sBAAsB,KAA2B;IACnE,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,6IAAA,CAAA,kBAAe,AAAD,EAAE;QACrC,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,QAAQ,KAAK,CAAC,uCAAuC;QACrD,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,cAAc;IAC7D;AACJ;;;IAVsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/update-user-reputation.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file implements an AI flow to update user reputation based on the accuracy of their ATM status reports.\n *\n * - updateUserReputation - A function that adjusts user reputation scores.\n * - UpdateUserReputationInput - The input type for the updateUserReputation function.\n * - UpdateUserReputationOutput - The output type for the updateUserReputation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst UpdateUserReputationInputSchema = z.object({\n  verifiedStatus: z.enum(['com_dinheiro', 'sem_dinheiro']).describe('The verified, true status of the ATM.'),\n  reports: z.array(\n    z.object({\n      userId: z.string().describe('The ID of the user who made the report.'),\n      status: z.enum(['com_dinheiro', 'sem_dinheiro']).describe('The status reported by the user.'),\n    })\n  ).describe('A list of user reports to be evaluated.'),\n});\nexport type UpdateUserReputationInput = z.infer<typeof UpdateUserReputationInputSchema>;\n\nconst UpdateUserReputationOutputSchema = z.object({\n  reputationUpdates: z.array(\n    z.object({\n      userId: z.string().describe('The ID of the user whose reputation is being updated.'),\n      reputationChange: z.number().int().describe('The change in reputation score. Typically +1 for a correct report and -1 for an incorrect one.'),\n      reasoning: z.string().describe('A brief explanation for the reputation change.'),\n    })\n  ).describe('An array of reputation updates for the users.'),\n});\nexport type UpdateUserReputationOutput = z.infer<typeof UpdateUserReputationOutputSchema>;\n\n\nexport async function updateUserReputation(input: UpdateUserReputationInput): Promise<UpdateUserReputationOutput> {\n    return updateUserReputationFlow(input);\n}\n\n\nconst updateUserReputationPrompt = ai.definePrompt({\n    name: 'updateUserReputationPrompt',\n    input: {schema: UpdateUserReputationInputSchema},\n    output: {schema: UpdateUserReputationOutputSchema},\n    prompt: `You are an AI assistant that manages user reputations in an ATM locator app.\n  \n    Your task is to adjust user reputation scores based on the accuracy of their reports.\n  \n    The verified, true status of the ATM is: {{{verifiedStatus}}}\n  \n    Here are the user reports you need to evaluate:\n    {{#each reports}}\n    - User ID: {{{userId}}}, Reported Status: {{{status}}}\n    {{/each}}\n  \n    For each report, compare the user's reported status with the verified status.\n    - If the reported status matches the verified status, their reputation should increase by 1.\n    - If the reported status does not match, their reputation should decrease by 1.\n  \n    Provide a list of all necessary reputation updates in JSON format.\n    `,\n  });\n\nconst updateUserReputationFlow = ai.defineFlow(\n  {\n    name: 'updateUserReputationFlow',\n    inputSchema: UpdateUserReputationInputSchema,\n    outputSchema: UpdateUserReputationOutputSchema,\n  },\n  async input => {\n    const {output} = await updateUserReputationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAgB;KAAe,EAAE,QAAQ,CAAC;IAClE,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CACd,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAgB;SAAe,EAAE,QAAQ,CAAC;IAC5D,IACA,QAAQ,CAAC;AACb;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,mBAAmB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACxB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;QAC5C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,IACA,QAAQ,CAAC;AACb;AAIO,eAAe,qBAAqB,KAAgC;IACvE,OAAO,yBAAyB;AACpC;AAGA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC/C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;;;IAgBT,CAAC;AACH;AAEF,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,2BAA2B;IAClD,OAAO;AACT;;;IArCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/init.ts"],"sourcesContent":["// src/firebase/init.ts\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  projectId: \"atm-locator-nbjla\",\n  appId: \"1:717294013912:web:8efc3fc8530e0920c6b6ad\",\n  storageBucket: \"atm-locator-nbjla.firebasestorage.app\",\n  apiKey: \"AIzaSyAEC8Imf55z2TcJBLh4k01tN4ZEYA4a8S4\",\n  authDomain: \"atm-locator-nbjla.firebaseapp.com\",\n  messagingSenderId: \"717294013912\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\nexport { auth, db };\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;AACvB;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,WAAW;IACX,OAAO;IACP,eAAe;IACf,QAAQ;IACR,YAAY;IACZ,mBAAmB;AACrB;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AAE1B,sBAAsB;AACtB,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/update-reputation.ts"],"sourcesContent":["'use server';\n\nimport { updateUserReputation, type UpdateUserReputationInput, type UpdateUserReputationOutput } from \"@/ai/flows/update-user-reputation\";\nimport { db } from \"@/firebase/init\";\nimport { doc, getDoc, updateDoc, increment } from \"firebase/firestore\";\n\nexport async function updateUserReputationAction(input: UpdateUserReputationInput): Promise<void> {\n    try {\n        console.log(\"Starting reputation update action with input:\", input);\n\n        // 1. Get reputation adjustments from the AI\n        const aiResult = await updateUserReputation(input);\n        console.log(\"AI result for reputation updates:\", aiResult);\n\n        if (!aiResult || !aiResult.reputationUpdates || aiResult.reputationUpdates.length === 0) {\n            console.log(\"No reputation updates suggested by AI.\");\n            return;\n        }\n\n        // 2. Apply updates to Firestore in a batch or loop\n        const updatePromises = aiResult.reputationUpdates.map(async (update) => {\n            if (!update.userId || typeof update.reputationChange !== 'number') {\n                console.warn(\"Skipping invalid reputation update:\", update);\n                return;\n            }\n\n            const userRef = doc(db, 'users', update.userId);\n            \n            // Check if user exists before attempting to update\n            const userDoc = await getDoc(userRef);\n            if (!userDoc.exists()) {\n                console.warn(`User with ID ${update.userId} not found. Skipping reputation update.`);\n                return;\n            }\n\n            console.log(`Updating reputation for user ${update.userId} by ${update.reputationChange}`);\n            \n            // Use Firestore's `increment` to safely update the score\n            return updateDoc(userRef, {\n                reputation: increment(update.reputationChange)\n            });\n        });\n\n        await Promise.all(updatePromises);\n        console.log(\"All reputation updates have been processed.\");\n\n    } catch (error) {\n        console.error(\"Error in updateUserReputationAction:\", error);\n        // We don't throw an error to the client, as this is a background process.\n        // Errors are logged on the server.\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAAA;;;;;;;AAEO,eAAe,2BAA2B,KAAgC;IAC7E,IAAI;QACA,QAAQ,GAAG,CAAC,iDAAiD;QAE7D,4CAA4C;QAC5C,MAAM,WAAW,MAAM,CAAA,GAAA,kJAAA,CAAA,uBAAoB,AAAD,EAAE;QAC5C,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,IAAI,CAAC,YAAY,CAAC,SAAS,iBAAiB,IAAI,SAAS,iBAAiB,CAAC,MAAM,KAAK,GAAG;YACrF,QAAQ,GAAG,CAAC;YACZ;QACJ;QAEA,mDAAmD;QACnD,MAAM,iBAAiB,SAAS,iBAAiB,CAAC,GAAG,CAAC,OAAO;YACzD,IAAI,CAAC,OAAO,MAAM,IAAI,OAAO,OAAO,gBAAgB,KAAK,UAAU;gBAC/D,QAAQ,IAAI,CAAC,uCAAuC;gBACpD;YACJ;YAEA,MAAM,UAAU,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,uHAAA,CAAA,KAAE,EAAE,SAAS,OAAO,MAAM;YAE9C,mDAAmD;YACnD,MAAM,UAAU,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;YAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI;gBACnB,QAAQ,IAAI,CAAC,CAAC,aAAa,EAAE,OAAO,MAAM,CAAC,uCAAuC,CAAC;gBACnF;YACJ;YAEA,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,OAAO,MAAM,CAAC,IAAI,EAAE,OAAO,gBAAgB,EAAE;YAEzF,yDAAyD;YACzD,OAAO,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,SAAS;gBACtB,YAAY,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,OAAO,gBAAgB;YACjD;QACJ;QAEA,MAAM,QAAQ,GAAG,CAAC;QAClB,QAAQ,GAAG,CAAC;IAEhB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wCAAwC;IACtD,0EAA0E;IAC1E,mCAAmC;IACvC;AACJ;;;IA7CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/atm/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {verifyAtmStatusAction as '401fbe705ad27fd5f69581e88ae6e4e533182f705f'} from 'ACTIONS_MODULE0'\nexport {updateUserReputationAction as '40a8ceb396dd971a9ce36bb6bdaac71e7f687ec624'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/atm/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/atm/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/atm/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/atm/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/atm/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/atm/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 641, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}