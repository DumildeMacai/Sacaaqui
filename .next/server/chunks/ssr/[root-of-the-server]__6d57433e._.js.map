{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/verify-atm-status.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file implements an AI flow to verify the ATM status based on user reports and reputation.\n *\n * - verifyAtmStatus - A function that verifies the ATM status.\n * - VerifyAtmStatusInput - The input type for the verifyAtmStatus function.\n * - VerifyAtmStatusOutput - The output type for the verifyAtmStatus function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyAtmStatusInputSchema = z.object({\n  atmId: z.string().describe('The ID of the ATM to verify.'),\n  reports: z.array(\n    z.object({\n      userId: z.string().describe('The ID of the user reporting the status.'),\n      status: z.enum(['com_dinheiro', 'sem_dinheiro']).describe('The reported status of the ATM.'),\n      timestamp: z.string().describe('The timestamp of the report in ISO format.'),\n    })\n  ).describe('An array of user reports for the ATM status.'),\n});\nexport type VerifyAtmStatusInput = z.infer<typeof VerifyAtmStatusInputSchema>;\n\nconst VerifyAtmStatusOutputSchema = z.object({\n  verifiedStatus: z.enum(['com_dinheiro', 'sem_dinheiro', 'desconhecido']).describe('The AI-verified status of the ATM.'),\n  confidenceScore: z.number().min(0).max(1).describe('A confidence score (0 to 1) for the verified status.'),\n  reasoning: z.string().describe('The reasoning behind the AI verification.'),\n});\nexport type VerifyAtmStatusOutput = z.infer<typeof VerifyAtmStatusOutputSchema>;\n\nexport async function verifyAtmStatus(input: VerifyAtmStatusInput): Promise<VerifyAtmStatusOutput> {\n  return verifyAtmStatusFlow(input);\n}\n\nconst verifyAtmStatusPrompt = ai.definePrompt({\n  name: 'verifyAtmStatusPrompt',\n  input: {schema: VerifyAtmStatusInputSchema},\n  output: {schema: VerifyAtmStatusOutputSchema},\n  prompt: `You are an AI assistant tasked with verifying the status of ATMs based on user reports.\n\n  Given the following ATM ID: {{{atmId}}}\n  And the following user reports:\n  {{#each reports}}\n  - User ID: {{{userId}}}, Status: {{{status}}}, Timestamp: {{{timestamp}}}\n  {{/each}}\n\n  Analyze the reports, taking into account potential biases, user reputation (which is not provided but should be assumed), and the recency of the reports.\n\n  Determine the most likely status of the ATM (com_dinheiro, sem_dinheiro, or desconhecido) and provide a confidence score (0 to 1) for your assessment.\n\n  Also, provide a brief reasoning for your decision.\n\n  Output in JSON format:\n  { \"verifiedStatus\": \"<status>\", \"confidenceScore\": <score>, \"reasoning\": \"<reason>\" }`,\n});\n\nconst verifyAtmStatusFlow = ai.defineFlow(\n  {\n    name: 'verifyAtmStatusFlow',\n    inputSchema: VerifyAtmStatusInputSchema,\n    outputSchema: VerifyAtmStatusOutputSchema,\n  },\n  async input => {\n    const {output} = await verifyAtmStatusPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CACd,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAgB;SAAe,EAAE,QAAQ,CAAC;QAC1D,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,IACA,QAAQ,CAAC;AACb;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAgB;QAAgB;KAAe,EAAE,QAAQ,CAAC;IAClF,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;IACnD,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;uFAe4E,CAAC;AACxF;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/verify-status.ts"],"sourcesContent":["\"use server\";\n\nimport { verifyAtmStatus, type VerifyAtmStatusInput, type VerifyAtmStatusOutput } from \"@/ai/flows/verify-atm-status\";\n\nexport async function verifyAtmStatusAction(input: VerifyAtmStatusInput): Promise<VerifyAtmStatusOutput> {\n    try {\n        const result = await verifyAtmStatus(input);\n        return result;\n    } catch (error) {\n        console.error(\"Error verifying ATM status with AI:\", error);\n        throw new Error(\"AI verification failed.\");\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,sBAAsB,KAA2B;IACnE,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,6IAAA,CAAA,kBAAe,AAAD,EAAE;QACrC,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uCAAuC;QACrD,MAAM,IAAI,MAAM;IACpB;AACJ;;;IARsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/atm/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {verifyAtmStatusAction as '401fbe705ad27fd5f69581e88ae6e4e533182f705f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/atm/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/atm/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/atm/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/atm/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/atm/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/atm/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}