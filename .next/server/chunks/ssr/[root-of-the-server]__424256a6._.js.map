{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/admin.ts"],"sourcesContent":["\nimport * as admin from 'firebase-admin';\n\n// Função para garantir que a inicialização do SDK Admin ocorra apenas uma vez.\nfunction initializeAdminApp() {\n    // Se a aplicação já estiver inicializada, retorna a aplicação existente.\n    if (admin.apps.length > 0) {\n        return admin.app();\n    }\n\n    try {\n        // Caso contrário, inicializa uma nova aplicação.\n        // A configuração `credential: admin.credential.applicationDefault()` é usada\n        // para que o SDK possa encontrar automaticamente as credenciais do ambiente\n        // quando executado em infraestrutura Google Cloud (como o App Hosting).\n        return admin.initializeApp();\n    } catch (error) {\n        console.error('Firebase admin initialization error', error);\n        // Lança um erro claro se a inicialização falhar.\n        throw new Error('Failed to initialize Firebase Admin SDK. Check server logs.');\n    }\n}\n\n// Garante que a aplicação seja inicializada ao carregar este módulo.\ninitializeAdminApp();\n\n// Exporta uma função que retorna os serviços de admin necessários.\n// Isto garante que qualquer parte da aplicação que importe estes serviços\n// receba instâncias que foram criadas APÓS a inicialização bem-sucedida.\nexport function getAdminServices() {\n    return {\n        db: admin.firestore(),\n        auth: admin.auth(),\n    };\n}\n"],"names":[],"mappings":";;;AACA;;AAEA,+EAA+E;AAC/E,SAAS;IACL,yEAAyE;IACzE,IAAI,2HAAA,CAAA,OAAU,CAAC,MAAM,GAAG,GAAG;QACvB,OAAO,CAAA,GAAA,2HAAA,CAAA,MAAS,AAAD;IACnB;IAEA,IAAI;QACA,iDAAiD;QACjD,6EAA6E;QAC7E,4EAA4E;QAC5E,wEAAwE;QACxE,OAAO,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uCAAuC;QACrD,iDAAiD;QACjD,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,qEAAqE;AACrE;AAKO,SAAS;IACZ,OAAO;QACH,IAAI,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD;QAClB,MAAM,CAAA,GAAA,2HAAA,CAAA,OAAU,AAAD;IACnB;AACJ","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/get-admin-data.ts"],"sourcesContent":["\n'use server';\n\nimport { getAdminServices } from \"@/firebase/admin\";\nimport type { Atm, User } from \"@/types\";\n\ninterface AdminVerificationResult {\n    isAdmin: boolean;\n    error?: string;\n}\n\n// Verifica se o utilizador é um administrador\nasync function verifyAdmin(token: string): Promise<AdminVerificationResult> {\n    try {\n        const { auth } = getAdminServices();\n        const decodedToken = await auth.verifyIdToken(token);\n        \n        if (decodedToken.email === 'admin@admin.com') {\n            return { isAdmin: true };\n        } else {\n            return { isAdmin: false, error: 'Utilizador não é um administrador.' };\n        }\n    } catch (error) {\n        console.error(\"Erro na verificação do token:\", error);\n        return { isAdmin: false, error: 'Token inválido ou expirado.' };\n    }\n}\n\n\n// Server Action para buscar os dados do dashboard\nexport async function getDashboardData(token: string) {\n    const adminCheck = await verifyAdmin(token);\n    if (!adminCheck.isAdmin) {\n        return { success: false, error: adminCheck.error };\n    }\n\n    try {\n        const { db } = getAdminServices();\n        const atmsSnapshot = await db.collection('atms').get();\n        const usersSnapshot = await db.collection('users').get();\n        \n        const atms = atmsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Omit<Atm, 'lastUpdate' | 'reports'>[];\n\n        return {\n            success: true,\n            data: {\n                atmCount: atmsSnapshot.size,\n                userCount: usersSnapshot.size,\n                atms: atms,\n            }\n        };\n    } catch (error) {\n        console.error(\"Erro ao buscar dados do dashboard (server):\", error);\n        return { success: false, error: 'Falha ao buscar dados do Firestore.' };\n    }\n}\n\n\n// Server Action para buscar a lista de utilizadores\nexport async function getUsersData(token: string) {\n    const adminCheck = await verifyAdmin(token);\n    if (!adminCheck.isAdmin) {\n        return { success: false, error: adminCheck.error };\n    }\n    \n    try {\n        const { db } = getAdminServices();\n        const usersSnapshot = await db.collection('users').get();\n\n        const users: User[] = usersSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n        })) as User[];\n\n        return { success: true, data: users };\n    } catch (error) {\n        console.error(\"Erro ao buscar utilizadores (server):\", error);\n        return { success: false, error: 'Falha ao buscar utilizadores do Firestore.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;AAGA;;;;;AAQA,8CAA8C;AAC9C,eAAe,YAAY,KAAa;IACpC,IAAI;QACA,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD;QAChC,MAAM,eAAe,MAAM,KAAK,aAAa,CAAC;QAE9C,IAAI,aAAa,KAAK,KAAK,mBAAmB;YAC1C,OAAO;gBAAE,SAAS;YAAK;QAC3B,OAAO;YACH,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAqC;QACzE;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YAAE,SAAS;YAAO,OAAO;QAA8B;IAClE;AACJ;AAIO,eAAe,iBAAiB,KAAa;IAChD,MAAM,aAAa,MAAM,YAAY;IACrC,IAAI,CAAC,WAAW,OAAO,EAAE;QACrB,OAAO;YAAE,SAAS;YAAO,OAAO,WAAW,KAAK;QAAC;IACrD;IAEA,IAAI;QACA,MAAM,EAAE,EAAE,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD;QAC9B,MAAM,eAAe,MAAM,GAAG,UAAU,CAAC,QAAQ,GAAG;QACpD,MAAM,gBAAgB,MAAM,GAAG,UAAU,CAAC,SAAS,GAAG;QAEtD,MAAM,OAAO,aAAa,IAAI,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAAE,IAAI,IAAI,EAAE;gBAAE,GAAG,IAAI,IAAI,EAAE;YAAC,CAAC;QAExE,OAAO;YACH,SAAS;YACT,MAAM;gBACF,UAAU,aAAa,IAAI;gBAC3B,WAAW,cAAc,IAAI;gBAC7B,MAAM;YACV;QACJ;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO;YAAE,SAAS;YAAO,OAAO;QAAsC;IAC1E;AACJ;AAIO,eAAe,aAAa,KAAa;IAC5C,MAAM,aAAa,MAAM,YAAY;IACrC,IAAI,CAAC,WAAW,OAAO,EAAE;QACrB,OAAO;YAAE,SAAS;YAAO,OAAO,WAAW,KAAK;QAAC;IACrD;IAEA,IAAI;QACA,MAAM,EAAE,EAAE,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD;QAC9B,MAAM,gBAAgB,MAAM,GAAG,UAAU,CAAC,SAAS,GAAG;QAEtD,MAAM,QAAgB,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBACjD,IAAI,IAAI,EAAE;gBACV,GAAG,IAAI,IAAI,EAAE;YACjB,CAAC;QAED,OAAO;YAAE,SAAS;YAAM,MAAM;QAAM;IACxC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA6C;IACjF;AACJ;;;IAjDsB;IA6BA;;AA7BA,+OAAA;AA6BA,+OAAA","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/%28panel%29/users/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getUsersData as '40b713bbd34af92c36becad1119c82b5c71e6c929d'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/%28panel%29/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/(panel)/users/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/(panel)/users/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/%28panel%29/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/(panel)/users/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/(panel)/users/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}