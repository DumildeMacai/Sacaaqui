{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase-admin.ts"],"sourcesContent":["\n// src/lib/firebase-admin.ts\nimport * as admin from 'firebase-admin';\nimport type { Atm } from '@/types';\nimport { FieldValue } from 'firebase-admin/firestore';\n\n// Garante que a inicialização ocorra apenas uma vez.\nif (!admin.apps.length) {\n    try {\n        const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY!);\n\n        admin.initializeApp({\n            credential: admin.credential.cert(serviceAccount),\n        });\n        console.log(\"Firebase Admin SDK inicializado com sucesso.\");\n    } catch (error: any) {\n        console.error(\"Erro CRÍTICO ao inicializar o Firebase Admin SDK:\", error.message);\n        // Em um ambiente de produção, você pode querer lidar com isso de forma mais graciosa.\n        // Por agora, vamos lançar o erro para tornar o problema visível durante o desenvolvimento.\n        throw new Error(`Falha na inicialização do Firebase Admin: ${error.message}`);\n    }\n}\n\n\nconst db = admin.firestore();\n\nexport async function addAtm(atmData: Omit<Atm, 'id' | 'status' | 'lastUpdate' | 'reports'>): Promise<string> {\n    const newAtmRef = db.collection('atms').doc();\n    const newAtm = {\n        ...atmData,\n        status: 'desconhecido', // Initial status\n        lastUpdate: FieldValue.serverTimestamp(),\n        reports: [],\n    };\n    await newAtmRef.set(newAtm);\n    return newAtmRef.id;\n}\n\nexport async function updateAtm(id: string, atmData: Omit<Atm, 'id' | 'status' | 'lastUpdate' | 'reports'>): Promise<void> {\n    const atmRef = db.collection('atms').doc(id);\n    // Usamos 'merge: true' para garantir que apenas os campos fornecidos sejam atualizados\n    // e para evitar a sobreescrita de 'reports' ou 'status' se não forem incluídos.\n    await atmRef.set(atmData, { merge: true });\n}\n\n\nexport async function getAtms(): Promise<Atm[]> {\n  try {\n    const atmsSnapshot = await db.collection('atms').get();\n    if (atmsSnapshot.empty) {\n      console.log(\"Nenhum ATM encontrado no Firestore.\");\n      return [];\n    }\n\n    const atms = atmsSnapshot.docs.map(doc => {\n      const data = doc.data();\n      // Correção: Garante que o timestamp seja convertido para string ISO\n      const lastUpdate = data.lastUpdate?.toDate ? data.lastUpdate.toDate().toISOString() : new Date().toISOString();\n      \n      const reports = data.reports?.map((report: any) => ({\n          ...report,\n          // Garante que o timestamp do relatório também seja convertido corretamente.\n          timestamp: report.timestamp?.toDate ? report.timestamp.toDate().toISOString() : (report.timestamp || new Date().toISOString()),\n      })) || [];\n\n      return {\n        id: doc.id,\n        ...data,\n        lastUpdate: lastUpdate,\n        reports: reports,\n      } as Atm;\n    });\n    return atms;\n  } catch (error) {\n    console.error(\"Erro ao buscar ATMs no Firestore:\", error);\n    return []; \n  }\n}\n\nexport async function getAtmById(id: string): Promise<Atm | null> {\n  try {\n    const atmDoc = await db.collection('atms').doc(id).get();\n  \n    if (!atmDoc.exists) {\n      console.log(`ATM com id ${id} não encontrado.`);\n      return null;\n    }\n  \n    const data = atmDoc.data()!;\n      \n    // Correção: Garante que o timestamp seja convertido para string ISO\n    const lastUpdate = data.lastUpdate?.toDate ? data.lastUpdate.toDate().toISOString() : new Date().toISOString();\n    \n    const reports = data.reports?.map((report: any) => ({\n      ...report,\n      // Garante que o timestamp do relatório também seja convertido corretamente.\n      timestamp: report.timestamp?.toDate ? report.timestamp.toDate().toISOString() : (report.timestamp || new Date().toISOString()),\n    })) || [];\n\n    return {\n      id: atmDoc.id,\n      ...data,\n      details: data.details || null,\n      lastUpdate: lastUpdate,\n      reports: reports,\n    } as Atm;\n  \n  } catch (error) {\n    console.error(`Erro ao buscar ATM com id ${id}:`, error);\n    return null;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/atms/route.ts"],"sourcesContent":["import { getAtms, addAtm } from '@/lib/firebase-admin';\nimport { NextResponse } from 'next/server';\nimport type { Atm } from '@/types';\n\nexport async function GET() {\n  try {\n    const atms = await getAtms();\n    return NextResponse.json(atms);\n  } catch (error) {\n    console.error('Error fetching ATMs:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n    try {\n        const body = await request.json();\n\n        // Validação robusta dos dados recebidos\n        if (!body.name || !body.address || !body.location || typeof body.location.lat !== 'number' || typeof body.location.lng !== 'number') {\n            return NextResponse.json({ error: 'Missing or invalid required ATM fields: name, address, location (lat, lng).' }, { status: 400 });\n        }\n        \n        // Cria um payload limpo e bem tipado para garantir a consistência dos dados\n        const newAtmPayload: Omit<Atm, 'id' | 'status' | 'lastUpdate' | 'reports'> = {\n            name: body.name,\n            address: body.address,\n            location: {\n                lat: body.location.lat,\n                lng: body.location.lng,\n            },\n            details: body.details || '', // Garante que 'details' seja sempre uma string\n        };\n\n        const newAtmId = await addAtm(newAtmPayload);\n        \n        return NextResponse.json({ id: newAtmId, message: 'ATM added successfully' }, { status: 201 });\n\n    } catch (error) {\n        console.error('Error adding ATM:', error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json({ error: 'Internal Server Error', details: errorMessage }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,wCAAwC;QACxC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,KAAK,QAAQ,CAAC,GAAG,KAAK,YAAY,OAAO,KAAK,QAAQ,CAAC,GAAG,KAAK,UAAU;YACjI,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8E,GAAG;gBAAE,QAAQ;YAAI;QACrI;QAEA,4EAA4E;QAC5E,MAAM,gBAAuE;YACzE,MAAM,KAAK,IAAI;YACf,SAAS,KAAK,OAAO;YACrB,UAAU;gBACN,KAAK,KAAK,QAAQ,CAAC,GAAG;gBACtB,KAAK,KAAK,QAAQ,CAAC,GAAG;YAC1B;YACA,SAAS,KAAK,OAAO,IAAI;QAC7B;QAEA,MAAM,WAAW,MAAM,CAAA,GAAA,iIAAA,CAAA,SAAM,AAAD,EAAE;QAE9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAU,SAAS;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAEhG,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyB,SAAS;QAAa,GAAG;YAAE,QAAQ;QAAI;IACtG;AACJ","debugId":null}}]
}