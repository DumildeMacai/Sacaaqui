{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase-admin.ts"],"sourcesContent":["// src/lib/firebase-admin.ts\nimport * as admin from 'firebase-admin';\nimport type { Atm } from '@/types';\n\n// Garante que a inicialização ocorra apenas uma vez.\nif (!admin.apps.length) {\n    try {\n        // A inicialização padrão lê as credenciais das variáveis de ambiente\n        // (GOOGLE_APPLICATION_CREDENTIALS) ou de outras configurações do ambiente.\n        admin.initializeApp();\n        console.log(\"Firebase Admin SDK inicializado com sucesso.\");\n    } catch (error: any) {\n        console.error(\"Erro CRÍTICO ao inicializar o Firebase Admin SDK:\", error.message);\n        // Lançar um erro para interromper a execução se a inicialização falhar.\n        throw new Error(`Falha na inicialização do Firebase Admin: ${error.message}`);\n    }\n}\n\nconst db = admin.firestore();\n\nconst convertTimestampToString = (timestamp: any): string => {\n    if (!timestamp) {\n        // Retorna um valor padrão ou lança um erro, dependendo da sua lógica.\n        // Usar a data atual como fallback pode ser uma opção.\n        return new Date().toISOString();\n    }\n    if (timestamp instanceof admin.firestore.Timestamp) {\n        return timestamp.toDate().toISOString();\n    }\n    // Se já for uma string (ou outro tipo), apenas retorna.\n    // Adicione validação extra se necessário.\n    return timestamp.toString();\n};\n\n\nexport async function getAtms(): Promise<Atm[]> {\n  try {\n    const atmsSnapshot = await db.collection('atms').get();\n    if (atmsSnapshot.empty) {\n      return [];\n    }\n\n    const atms = atmsSnapshot.docs.map(doc => {\n      const data = doc.data();\n      const reports = (data.reports || []).map((report: any) => ({\n          ...report,\n          timestamp: convertTimestampToString(report.timestamp),\n      }));\n\n      return {\n        id: doc.id,\n        name: data.name || '',\n        address: data.address || '',\n        location: data.location || { lat: 0, lng: 0 },\n        status: data.status || 'desconhecido',\n        details: data.details || '',\n        lastUpdate: convertTimestampToString(data.lastUpdate),\n        reports: reports,\n      } as Atm;\n    });\n    return atms;\n  } catch (error) {\n    console.error(\"Erro ao buscar ATMs no Firestore:\", error);\n    throw new Error('Falha ao buscar ATMs do Firestore.');\n  }\n}\n\nexport async function getAtmById(id: string): Promise<Atm | null> {\n  try {\n    const atmDoc = await db.collection('atms').doc(id).get();\n  \n    if (!atmDoc.exists) {\n      return null;\n    }\n  \n    const data = atmDoc.data()!;\n    const reports = (data.reports || []).map((report: any) => ({\n        ...report,\n        timestamp: convertTimestampToString(report.timestamp),\n    }));\n\n    return {\n      id: atmDoc.id,\n      name: data.name || '',\n      address: data.address || '',\n      location: data.location || { lat: 0, lng: 0 },\n      status: data.status || 'desconhecido',\n      details: data.details || '',\n      lastUpdate: convertTimestampToString(data.lastUpdate),\n      reports: reports,\n    } as Atm;\n  \n  } catch (error) {\n    console.error(`Erro ao buscar ATM com id ${id}:`, error);\n    throw new Error(`Falha ao buscar o ATM ${id} do Firestore.`);\n  }\n}\n\nexport async function addAtm(atmData: Omit<Atm, 'id' | 'status' | 'lastUpdate' | 'reports'>): Promise<string> {\n    const newAtmRef = db.collection('atms').doc();\n    const newAtm = {\n        ...atmData,\n        status: 'desconhecido',\n        lastUpdate: admin.firestore.FieldValue.serverTimestamp(),\n        reports: [],\n        details: atmData.details || '',\n    };\n    await newAtmRef.set(newAtm);\n    return newAtmRef.id;\n}\n\nexport async function updateAtm(id: string, atmData: Partial<Omit<Atm, 'id'>>): Promise<void> {\n    const atmRef = db.collection('atms').doc(id);\n    const updateData = { ...atmData, lastUpdate: admin.firestore.FieldValue.serverTimestamp() };\n    await atmRef.update(updateData);\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/atms/route.ts"],"sourcesContent":["import { getAtms, addAtm } from '@/lib/firebase-admin';\nimport { NextResponse } from 'next/server';\nimport type { Atm } from '@/types';\n\nexport async function GET() {\n  try {\n    const atms = await getAtms();\n    return NextResponse.json(atms);\n  } catch (error) {\n    console.error('Error fetching ATMs:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n    try {\n        const body: Omit<Atm, 'id' | 'status' | 'lastUpdate' | 'reports'> = await request.json();\n\n        // Validação básica para garantir que os campos essenciais existem\n        if (!body.name || !body.address || !body.location || typeof body.location.lat !== 'number' || typeof body.location.lng !== 'number') {\n            return NextResponse.json({ error: 'Missing or invalid required ATM fields: name, address, location (lat, lng).' }, { status: 400 });\n        }\n        \n        // A função addAtm já define os valores padrão (status, lastUpdate, reports)\n        const newAtmId = await addAtm(body);\n        \n        return NextResponse.json({ id: newAtmId, message: 'ATM added successfully' }, { status: 201 });\n\n    } catch (error) {\n        console.error('Error adding ATM:', error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json({ error: 'Internal Server Error', details: errorMessage }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAA8D,MAAM,QAAQ,IAAI;QAEtF,kEAAkE;QAClE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,KAAK,QAAQ,CAAC,GAAG,KAAK,YAAY,OAAO,KAAK,QAAQ,CAAC,GAAG,KAAK,UAAU;YACjI,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8E,GAAG;gBAAE,QAAQ;YAAI;QACrI;QAEA,4EAA4E;QAC5E,MAAM,WAAW,MAAM,CAAA,GAAA,iIAAA,CAAA,SAAM,AAAD,EAAE;QAE9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAU,SAAS;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAEhG,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyB,SAAS;QAAa,GAAG;YAAE,QAAQ;QAAI;IACtG;AACJ","debugId":null}}]
}